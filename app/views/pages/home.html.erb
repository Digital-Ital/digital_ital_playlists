<div class="min-h-screen">
  <!-- Hero Section -->
  <section class="relative overflow-hidden">
    <!-- Animated Background -->
    <div class="absolute inset-0 opacity-15">
      <div class="absolute top-0 left-0 w-full h-full bg-gradient-to-br from-yellow-900 via-red-900 to-green-900 animate-pulse"></div>
      <div class="absolute top-10 left-10 w-32 h-32 bg-yellow-800 rounded-full blur-3xl animate-bounce"></div>
      <div class="absolute top-40 right-20 w-24 h-24 bg-red-900 rounded-full blur-2xl animate-pulse delay-1000"></div>
      <div class="absolute bottom-20 left-1/3 w-28 h-28 bg-green-900 rounded-full blur-3xl animate-bounce delay-500"></div>
    </div>
    
    <div class="relative z-10 container mx-auto px-6 py-20">
      <!-- Header -->
      <div id="header-section" class="text-center mb-16">
        <%= link_to root_path, class: "inline-block", data: { turbo: false } do %>
        <h1 class="text-6xl md:text-8xl font-bold mb-6">
            <span class="bg-gradient-to-r from-yellow-600 via-red-900 to-green-700 bg-clip-text text-transparent drop-shadow-lg">
              Digital Ital Crates
          </span>
        </h1>
        <% end %>
        
        <!-- Social Media Links -->
        <div class="flex justify-center items-center gap-4 mb-4 flex-wrap">
          <a href="https://open.spotify.com/user/zelou2?si=6869207672ad47a3" target="_blank" class="group flex items-center justify-center gap-2 px-4 py-2 rounded-full transition-all duration-300 transform hover:scale-105 shadow-lg w-32" style="background: linear-gradient(135deg, #1DB954 0%, #1ed760 100%);">
            <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.42 1.56-.299.421-1.02.599-1.559.3z"/>
            </svg>
            <span class="text-white font-semibold">Spotify</span>
          </a>
          
          <a href="https://www.instagram.com/digital.ital/" target="_blank" class="group flex items-center justify-center gap-2 px-4 py-2 rounded-full transition-all duration-300 transform hover:scale-105 shadow-lg w-32" style="background: linear-gradient(45deg, #833AB4 0%, #E1306C 50%, #FD1D1D 100%);">
            <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/>
            </svg>
            <span class="text-white font-semibold">Instagram</span>
          </a>
          
          <a href="https://x.com/Digital_Ital" target="_blank" class="group flex items-center justify-center gap-2 px-4 py-2 rounded-full transition-all duration-300 transform hover:scale-105 shadow-lg w-32 bg-gradient-to-r from-black to-gray-800 hover:from-gray-800 hover:to-gray-700 hover:shadow-gray-500/25">
            <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
            </svg>
            <span class="text-white font-semibold">X</span>
          </a>
          
          <a href="https://www.mixcloud.com/Digital_Ital/" target="_blank" class="group flex items-center justify-center gap-2 px-4 py-2 rounded-full transition-all duration-300 transform hover:scale-105 shadow-lg w-32 hover:brightness-110" style="background: linear-gradient(135deg, #314455 0%, #52AAC6 100%);">
            <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="M2.462 8.596l1.372 6.49h.297l1.368-6.49h1.368l1.368 6.49h.297l1.368-6.49h1.368v7.78h-1.368v-1.297h-.297v1.297H8.388v-1.297h-.297v1.297H6.723v-1.297h-.297v1.297H5.058v-1.297h-.297v1.297H3.393V8.596h1.368zm11.712 0v7.78h-1.368V8.596h1.368zm3.405 0v7.78h-1.368V8.596h1.368zm3.405 0v7.78h-1.368V8.596h1.368zm3.405 0v7.78h-1.368V8.596h1.368zm3.405 0v7.78h-1.368V8.596h1.368z"/>
            </svg>
            <span class="text-white font-semibold">Mixcloud</span>
          </a>
          
          <a href="https://buymeacoffee.com/digitalital" target="_blank" class="group flex items-center justify-center gap-2 px-4 py-2 rounded-full transition-all duration-300 transform hover:scale-105 shadow-lg w-32 bg-yellow-600 hover:bg-yellow-500">
            <span class="text-white text-lg">‚òï</span>
            <span class="text-white font-semibold">Coffee</span>
          </a>
          
          <a href="https://ko-fi.com/digitalital" target="_blank" class="group flex items-center justify-center gap-2 px-4 py-2 rounded-full transition-all duration-300 transform hover:scale-105 shadow-lg w-32 bg-pink-600 hover:bg-pink-500">
            <span class="text-white text-lg">üéµ</span>
            <span class="text-white font-semibold">Ko-fi</span>
          </a>
        </div>
        
        <!-- Hero Intro Section -->
        <div class="max-w-4xl mx-auto my-12 bg-black/70 rounded-2xl p-8 border-2 border-gray-700">
          <h2 class="text-2xl md:text-3xl font-bold text-white mb-6 text-center">
            Digital Ital: Reggae, Lyrical Hip-Hop & Everything in between
          </h2>
          
          <div class="space-y-5 text-base md:text-lg text-white leading-relaxed">
            <p class="text-center">
              Tired of Spotify's algorithm suggesting the same 10 artists?
            </p>
            
            <p class="text-center">
              These are my meticulously curated playlists - years of digital crate digging through Spotify, 
              deep diving into reggae, lyrical hip-hop, and their beautiful mixtures.
            </p>
            
            <p class="text-center font-semibold text-white text-lg">
              From dubwise steppers to conscious rap, from Rub-a-Dub to Jazz-Hip-Hop - 
              every track has been carefully selected with love and passion for the music before anything else.
            </p>
            
            <div class="mt-6 p-4 bg-green-900/20 rounded-xl border border-green-500/30">
              <p class="text-center text-green-300 text-sm font-medium">
                üåç <span class="text-green-400 font-bold">Now updated daily:</span><br>
                Explore the new 8-Part "<a href='#latest-reggae-section' class='text-yellow-400 hover:text-yellow-300 underline transition-colors'>Latest Reggae</a>" Series ‚Äî from Dancehall to Dubwise, Roots Revival to Punk-Reggae, covering every current of modern reggae culture.<br>
                Every part captures a different pulse of the music, refreshed every day with the best new releases from around the world.
              </p>
            </div>
            
            <div class="mt-6 p-4 bg-green-900/20 rounded-xl border border-green-500/30">
              <p class="text-center text-green-300 text-sm font-medium">
                <span class="text-green-400 font-bold">"Ital"</span> comes from the Rastafarian movement in Jamaica, derived from "vital" - 
                meaning natural, pure, and authentic. <span class="text-green-400 font-bold">Ital is vital.</span> 
                <span class="text-green-400 font-bold">Digital Ital</span> means only natural, 
                authentic music that moves the culture. If it's not real and doesn't nourish the soul, it's not here.
              </p>
            </div>
          </div>
          
          <!-- Playlist Count & Thank You -->
          <div class="mt-8 pt-6 border-t border-gray-600/50">
            <div class="text-center">
              <p class="text-base md:text-lg font-bold text-white mb-2">
                üíö <span class="text-green-400"><%= number_with_delimiter(@total_followers_count) %></span> People Vibing to These Playlists on Spotify (This is what matters most after all) üíö
              </p>
              <p class="text-base md:text-lg text-gray-300">
                Thank you to each and every one of the followers!
              </p>
            </div>
          </div>
          
          <div class="flex flex-wrap justify-center gap-6 mt-8 text-sm text-gray-300">
            <span class="flex items-center gap-2">
              <span class="text-lg">üî•</span>
              <span>Fresh Releases (Daily Updated)</span>
            </span>
            <span class="flex items-center gap-2">
              <span class="text-lg">üéß</span>
              <span>Listen on Spotify</span>
            </span>
            <span class="flex items-center gap-2">
              <span class="text-lg">üîç</span>
              <span>Search by Artist or Vibe</span>
            </span>
            <span class="flex items-center gap-2">
              <span class="text-lg">üé≤</span>
              <span>Random Dig</span>
            </span>
          </div>
        </div>
        
        <!-- What's New Link -->
        <div class="flex justify-center mt-6">
          <%= link_to whats_new_path, class: "group flex flex-col items-center gap-2 px-8 py-4 bg-gradient-to-r from-yellow-700 via-orange-700 to-red-900 rounded-full hover:from-yellow-600 hover:via-orange-600 hover:to-red-800 transition-all duration-300 transform hover:scale-105 shadow-xl hover:shadow-orange-700/50" do %>
            <div class="flex items-center gap-3">
            <span class="text-2xl">üéµ</span>
            <span class="text-white font-bold text-lg">Curation Feed</span>
            <span class="text-2xl">üìà</span>
            </div>
            <span class="text-yellow-200 text-sm font-medium">‚Üí See All Curations Grouped by Song</span>
            <span class="text-yellow-300 text-xs font-medium">Chronological order, daily updated</span>
          <% end %>
        </div>
      </div>
      
      <!-- Featured Mix Section -->
      <div class="text-center mt-16 mb-8">
        <h3 class="text-2xl font-bold text-white mb-6">
          <span class="bg-gradient-to-r from-orange-400 to-red-500 bg-clip-text text-transparent">
            üéß Featured Mix
          </span>
        </h3>
        <div class="max-w-2xl mx-auto">
          <iframe width="100%" height="120" src="https://player-widget.mixcloud.com/widget/iframe/?hide_cover=1&feed=%2FDigital_Ital%2Fdubwise-raw-dancehall-dub-rap-reggae-fusion-20250904-131724%2F" frameborder="0" allow="encrypted-media; fullscreen; autoplay; idle-detection; speaker-selection; web-share;" class="rounded-lg shadow-lg"></iframe>
        </div>
      </div>
      
    </div>
  </section>

  <!-- Featured Playlists Section -->
  <% if @featured_playlists.any? %>
    <section id="latest-reggae-section" class="pt-8 pb-16 bg-gradient-to-b from-gray-900/80 to-transparent relative">
      <!-- Decorative elements -->
      <div class="absolute inset-0 overflow-hidden pointer-events-none">
        <div class="absolute top-10 left-10 w-32 h-32 bg-yellow-600/10 rounded-full blur-3xl"></div>
        <div class="absolute bottom-10 right-10 w-32 h-32 bg-red-900/10 rounded-full blur-3xl"></div>
      </div>
      
      <div class="container mx-auto px-6 relative z-10">
        <div class="text-center mb-4">
          <div class="inline-block mb-1.5">
            <h3 class="text-4xl md:text-5xl font-bold mb-1">
              <span class="text-yellow-400 drop-shadow-lg text-5xl">‚≠ê</span>
              <span class="text-white drop-shadow-lg">Latest Reggae</span>
              <span class="text-yellow-400 drop-shadow-lg text-5xl">‚≠ê</span>
            </h3>
          </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-7xl mx-auto">
          <!-- First row: 4 playlists -->
          <div class="lg:col-span-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-0.5">
            <% @featured_playlists.first(4).each do |playlist| %>
              <%= render 'playlist_card', playlist: playlist %>
            <% end %>
          </div>
          
          <!-- Second row: 4 playlists -->
          <% if @featured_playlists.count > 4 %>
            <div class="lg:col-span-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <% @featured_playlists.drop(4).each do |playlist| %>
                <%= render 'playlist_card', playlist: playlist %>
              <% end %>
            </div>
          <% end %>
        </div>
      </div>
    </section>
  <% end %>

  <!-- Dig Through The Crates - Unified Section -->
  <section class="py-12 relative">
    <div class="container mx-auto px-6 max-w-7xl">
      <div class="relative">
        <!-- Vinyl Crate Background -->
        <div class="bg-gradient-to-br from-amber-900/40 to-yellow-900/30 border-4 border-amber-800/50 rounded-2xl p-8 shadow-2xl relative overflow-hidden">
          <!-- Wood grain texture effect -->
          <div class="absolute inset-0 opacity-10" style="background-image: repeating-linear-gradient(90deg, transparent, transparent 2px, rgba(139, 69, 19, 0.3) 2px, rgba(139, 69, 19, 0.3) 4px);"></div>
          
          <div class="relative z-10">
            <!-- Main Header -->
            <div class="text-center mb-12">
              <h3 class="text-4xl md:text-5xl font-bold text-white drop-shadow-xl mb-4" style="text-shadow: 2px 2px 4px rgba(0,0,0,0.9);">
                üíø Dig Through The Crates üíø
              </h3>
              <p class="text-white text-lg font-semibold drop-shadow-lg" style="text-shadow: 2px 2px 4px rgba(0,0,0,0.9);">Three ways to discover your next favorite track</p>
            </div>

            <!-- Three Ways to Dig -->
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8">
              
              <!-- Search Method -->
              <div class="text-center">
                <div class="mb-4">
                  <div class="w-16 h-16 mx-auto bg-yellow-600/20 rounded-full flex items-center justify-center mb-3">
                    <span class="text-3xl">üîç</span>
                  </div>
                  <h4 class="text-xl font-bold text-white mb-2 drop-shadow-lg">Search</h4>
                  <p class="text-white text-sm drop-shadow-lg">by playlist, artist, track, or album</p>
                </div>
                
                <!-- Search Input -->
                <div class="relative">
                  <div class="absolute left-3 top-1/2 transform -translate-y-1/2 text-yellow-500 text-lg">
                    üîç
                  </div>
                  <input 
                    type="text" 
                    id="crate-search-input"
                    placeholder="Search: roots, protoje, steppers, dub..."
                    class="w-full pl-10 pr-10 py-3 bg-black/60 border-2 border-yellow-600/60 rounded-xl text-white placeholder-gray-400 focus:border-yellow-500 focus:outline-none focus:ring-2 focus:ring-yellow-500/50 transition-all duration-200 text-sm font-medium shadow-inner"
                  />
                  <button 
                    id="clear-search-btn"
                    class="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-yellow-400 transition-colors hidden text-lg"
                    title="Clear search"
                  >
                    ‚úï
                  </button>
                </div>
                
                <!-- Search hint -->
                <div id="search-hint" class="mt-3">
                  <span class="inline-block bg-black/50 px-2 py-1 rounded text-white text-xs font-semibold">
                    üéµ Start digging to find your sound
                  </span>
                </div>
                
                <!-- Search results count -->
                <div id="search-results-info" class="mt-3 text-center hidden">
                  <div class="inline-block bg-black/50 px-3 py-1 rounded-lg border border-yellow-600/50">
                    <span class="text-yellow-400 font-bold text-xs" id="search-results-count">0</span>
                    <span class="text-gray-300 text-xs"> playlists found</span>
                  </div>
                </div>
              </div>

              <!-- Categories Method -->
              <div class="text-center">
                <div class="mb-4">
                  <div class="w-16 h-16 mx-auto bg-green-600/20 rounded-full flex items-center justify-center mb-3">
                    <span class="text-3xl">üéµ</span>
                  </div>
                  <h4 class="text-xl font-bold text-white mb-2 drop-shadow-lg">Explore</h4>
                  <p class="text-white text-sm drop-shadow-lg">playlists organized by genre and theme</p>
                </div>
                
                <div class="text-center">
                  <span class="inline-block bg-black/50 px-3 py-1 rounded text-white text-xs font-semibold">
                    Browse categories below ‚Üì
                  </span>
                </div>
              </div>

              <!-- Random Method -->
              <div class="text-center">
                <div class="mb-4">
                  <div class="w-16 h-16 mx-auto bg-purple-600/20 rounded-full flex items-center justify-center mb-3">
                    <span class="text-3xl">üé≤</span>
                  </div>
                  <h4 class="text-xl font-bold text-white mb-2 drop-shadow-lg">Random Dig</h4>
                  <p class="text-white text-sm drop-shadow-lg">discover a random gem</p>
                </div>
                
                <button 
                  id="random-dig-btn"
                  onclick="randomDig()"
                  class="px-6 py-3 bg-gradient-to-r from-purple-700 to-purple-900 hover:from-purple-600 hover:to-purple-800 text-white font-bold rounded-xl shadow-xl hover:shadow-purple-500/30 transition-all duration-300 transform hover:scale-105 border-2 border-purple-500/50">
                  üé≤ Random Dig üé≤
                </button>
              </div>
            </div>
          </div>
            <!-- Categories Section -->
            <div class="mt-12">
              <div class="text-center mb-8">
                <h3 class="text-2xl md:text-3xl font-bold text-white mb-4 drop-shadow-xl" style="text-shadow: 2px 2px 4px rgba(0,0,0,0.9);">Browse by Category</h3>
                <p class="text-white text-lg font-semibold drop-shadow-lg" style="text-shadow: 2px 2px 4px rgba(0,0,0,0.9);">Explore playlists organized by genre and theme</p>
              </div>
      
      <!-- Show All Button -->
      <div id="show-all-container" class="text-center mb-6" style="display: none;">
        <button 
          class="category-btn px-6 py-3 bg-gradient-to-r from-yellow-700 to-yellow-800 text-white rounded-lg font-bold text-lg hover:from-yellow-600 hover:to-yellow-700 transition-all duration-300 hover:scale-105 shadow-lg hover:shadow-yellow-700/25"
          data-category-id=""
        >
          üåç Show All Playlists
        </button>
      </div>
      
      <!-- Dynamic Collapsible Tree Structure -->
      <% if @main_families.any? %>
        <div class="space-y-6">
          <% @main_families.each do |family| %>
            <div class="tree-node" id="family-<%= family.id %>-node" data-family-id="<%= family.id %>">
              <% family_has_children = family.children.any? %>
              <div class="tree-header cursor-pointer flex items-center justify-between p-5 rounded-2xl bg-gradient-to-r <%= family.family_color || 'from-gray-700/90 to-gray-600/90' %> hover:from-gray-600 hover:to-gray-500 transition-all duration-300 transform hover:-translate-y-0.5 shadow-xl hover:shadow-2xl border-2 border-yellow-400/40 hover:border-yellow-400/70 ring-1 ring-yellow-500/20" 
                   data-tree-toggle="family-<%= family.id %>"
                   data-category-id="<%= family.id %>"
                   data-category-slug="<%= family.slug %>">
                <div class="flex items-center gap-4 flex-wrap">
                  <% if family_has_children %>
                    <span class="tree-arrow text-3xl text-yellow-300 transform transition-transform duration-300 font-bold drop-shadow-lg" id="family-<%= family.id %>-arrow">‚ñ∂</span>
                  <% end %>
                  <span class="text-2xl font-extrabold text-white drop-shadow-lg tracking-wide">
                    <%= family.family_emoji || 'üéµ' %> <%= family.name.upcase %> <%= family.family_emoji || 'üéµ' %>
                  </span>
                  <span class="px-4 py-1.5 bg-black/40 rounded-full text-sm font-bold text-yellow-300 border-2 border-yellow-400/60 shadow-lg backdrop-blur-sm">
                    <%= family.playlists.count %> playlists / <%= family.playlists.sum(:track_count) %> tracks
                  </span>
                </div>
              </div>
              <div class="tree-content hidden ml-8 mt-4 space-y-3 border-l-4 border-yellow-500/60 pl-6 bg-black/10 rounded-r-xl py-3" id="family-<%= family.id %>-content">
                <!-- Family Root Categories -->
                <% family.children.order(:position, :name).each do |root_category| %>
                  <div class="tree-node">
                    <% root_has_children = root_category.children.any? %>
                    <div class="tree-header cursor-pointer flex items-center justify-between p-4 rounded-xl bg-gradient-to-r <%= family.family_color || 'from-gray-800/80 to-gray-700/80' %> hover:from-gray-700/90 hover:to-gray-600/90 transition-all duration-300 border border-gray-600/50 hover:border-yellow-500/50 shadow-md hover:shadow-lg transform hover:-translate-x-1"
                         data-tree-toggle="root-<%= root_category.id %>"
                         data-category-id="<%= root_category.id %>"
                         data-category-slug="<%= root_category.slug %>">
                      <div class="flex items-center gap-3 flex-wrap">
                        <% if root_has_children %>
                          <span class="tree-arrow text-xl text-yellow-300 transform transition-transform duration-300 font-bold" id="root-<%= root_category.id %>-arrow">‚ñ∂</span>
                        <% end %>
                        <span class="text-white font-bold text-lg drop-shadow-md">
                          <%= root_category.emoji || 'üé∂' %> <%= root_category.name %>
                        </span>
                        <span class="px-3 py-1 bg-black/40 rounded-full text-xs font-bold text-yellow-300 border border-yellow-400/50"><%= root_category.playlists.count %> playlists / <%= root_category.playlists.sum(:track_count) %> tracks</span>
                      </div>
                    </div>
                    <div class="tree-content hidden ml-8 mt-3 space-y-2 bg-black/20 rounded-xl p-3" id="root-<%= root_category.id %>-content">
                      <% root_category.children.order(:position, :name).each do |child| %>
                        <div class="flex items-center gap-2 p-3 rounded-lg bg-gray-900/60 hover:bg-gray-800/80 transition-all duration-200 border border-gray-700/40 hover:border-gray-600 shadow-sm hover:shadow-md transform hover:translate-x-1">
                          <button class="category-btn text-gray-200 hover:text-yellow-400 transition-colors font-semibold text-sm" 
                                  data-category-id="<%= child.id %>"
                                  data-category-name="<%= child.name %>"
                                  data-category-color="<%= child.color %>"
                                  data-category-slug="<%= child.slug %>">
                            ‚Ü≥ <%= child.emoji || 'üéµ' %> <%= child.name %>
                          </button>
                          <span class="px-2.5 py-1 bg-black/40 rounded-full text-xs font-bold text-gray-400 border border-gray-700/50">
                            <%= child.playlists.count %> / <%= child.playlists.sum(:track_count) %>
                          </span>
                        </div>
                      <% end %>
                    </div>
                  </div>
                <% end %>
              </div>
            </div>
          <% end %>
        </div>
      <% elsif @categories.any? %>
        <!-- Fallback: show root categories if no main families flagged -->
        <div class="space-y-4">
          <% @categories.each do |root_category| %>
            <div class="tree-node">
              <div class="tree-header cursor-pointer flex items-center justify-between p-4 rounded-xl bg-gradient-to-r from-gray-700/80 to-gray-600/80 hover:from-gray-600/90 hover:to-gray-500/90 transition-all duration-300 transform hover:scale-102 shadow-lg border-2 border-yellow-400/30"
                   data-tree-toggle="rootonly-<%= root_category.id %>"
                   data-category-id="<%= root_category.id %>"
                   data-category-slug="<%= root_category.slug %>">
                <div class="flex items-center gap-3">
                  <span class="tree-arrow text-2xl text-yellow-300 transform transition-transform duration-200 font-bold" id="rootonly-<%= root_category.id %>-arrow">‚ñ∂</span>
                  <span class="text-xl font-bold text-white drop-shadow-lg">
                    <%= root_category.emoji || 'üé∂' %> <%= root_category.name %>
                  </span>
                  <span class="px-3 py-1 bg-black/30 rounded-full text-sm font-bold text-yellow-300 border border-yellow-400/30">
                    <%= root_category.playlists.count %> playlists / <%= root_category.playlists.sum(:track_count) %> tracks
                  </span>
                </div>
              </div>
              <div class="tree-content hidden ml-6 mt-3 space-y-1 border-l-4 border-yellow-500/30 pl-4" id="rootonly-<%= root_category.id %>-content">
                <% root_category.children.each do |child| %>
                  <div class="flex items-center gap-2 p-2 rounded-lg bg-gray-900/30 hover:bg-gray-800/50 transition-colors border border-gray-700/30">
                    <button class="category-btn text-gray-200 hover:text-yellow-400 transition-colors font-semibold" 
                            data-category-id="<%= child.id %>"
                            data-category-name="<%= child.name %>"
                            data-category-color="<%= child.color %>"
                            data-category-slug="<%= child.slug %>">
                      ‚Ü≥ <%= child.emoji || 'üéµ' %> <%= child.name %>
                    </button>
                    <span class="px-2 py-0.5 bg-black/30 rounded text-xs font-bold text-gray-300">(<%= child.playlists.count %> / <%= child.playlists.sum(:track_count) %>)</span>
                  </div>
                <% end %>
              </div>
            </div>
          <% end %>
        </div>
      <% else %>
        <!-- Empty State -->
        <div class="text-center py-16">
          <div class="text-6xl mb-4">üéµ</div>
          <h3 class="text-2xl font-bold text-white mb-4">No Categories Yet</h3>
          <p class="text-gray-400 mb-6">Start building your music collection by adding categories and playlists through the admin panel.</p>
        </div>
      <% end %>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>


  <!-- Infinite Scroll Playlists -->
  <section id="playlists-section" class="py-16 bg-gradient-to-b from-transparent to-gray-900/30">
    <div class="container mx-auto px-6">
      <!-- Playlist Counter - Top -->
      <div id="playlist-counter-top" class="text-center mb-10 hidden">
        <div class="inline-block bg-gradient-to-r from-gray-900 to-gray-800 rounded-2xl px-8 py-4 border-2 border-yellow-500/40 shadow-xl ring-1 ring-yellow-500/20">
          <span class="text-yellow-400 font-bold text-xl drop-shadow-lg">
            <span id="current-count-top">0</span> <span class="text-gray-400">/</span> <span id="total-count-top">0</span> 
            <span class="text-gray-300 font-semibold ml-1">playlists</span>
          </span>
        </div>
      </div>
      
      <div id="playlists-container" class="grid grid-cols-1 gap-6">
        <!-- Playlists will be loaded here via JavaScript -->
      </div>
      
      <!-- Loading Spinner -->
      <div id="loading-spinner" class="text-center py-12 hidden">
        <div class="inline-block animate-spin rounded-full h-16 w-16 border-4 border-gray-700 border-t-yellow-500 shadow-lg"></div>
        <p class="text-gray-300 mt-6 text-lg font-medium">Loading more playlists...</p>
      </div>
      
      <!-- Playlist Counter - Bottom -->
      <div id="playlist-counter-bottom" class="text-center mt-10 hidden">
        <div class="inline-block bg-gradient-to-r from-gray-900 to-gray-800 rounded-2xl px-8 py-4 border-2 border-yellow-500/40 shadow-xl ring-1 ring-yellow-500/20">
          <span class="text-yellow-400 font-bold text-xl drop-shadow-lg">
            <span id="current-count-bottom">0</span> <span class="text-gray-400">/</span> <span id="total-count-bottom">0</span> 
            <span class="text-gray-300 font-semibold ml-1">playlists</span>
          </span>
        </div>
      </div>

      <!-- End of Content -->
      <div id="end-of-content" class="text-center py-16 hidden">
        <div class="inline-block bg-gradient-to-r from-gray-900 to-gray-800 rounded-2xl px-8 py-6 border-2 border-gray-700/50 shadow-xl">
          <div class="text-6xl mb-4">üéµ</div>
          <p class="text-gray-300 text-lg font-medium mb-2">You've reached the end</p>
          <p class="text-gray-500 text-sm">That's all the playlists in this selection</p>
        </div>
      </div>
    </div>
  </section>
</div>

<script>
  class PlaylistLoader {
    constructor() {
      this.currentOffset = 0;
      this.currentCategory = null;
      this.isLoading = false;
      this.hasMore = true;
      this.totalPlaylistsOnSite = 0;
      this.container = document.getElementById('playlists-container');
      this.loadingSpinner = document.getElementById('loading-spinner');
      this.endOfContent = document.getElementById('end-of-content');
      this.counterTop = document.getElementById('playlist-counter-top');
      this.counterBottom = document.getElementById('playlist-counter-bottom');
      this.observer = null;
      
      this.init();
    }
    
    init() {
      // Clear any existing playlists from previous page loads (Turbo cache)
      if (this.container) {
        this.container.innerHTML = '';
      }
      
      // Hide counters initially
      if (this.counterTop) this.counterTop.classList.add('hidden');
      if (this.counterBottom) this.counterBottom.classList.add('hidden');
      if (this.endOfContent) this.endOfContent.classList.add('hidden');
      
      this.loadPlaylists();
      this.setupInfiniteScroll();
      this.setupTreeToggleHandlers();
      this.setupCategoryButtons();
      this.setupSearch();
    }
    
    setupSearch() {
      const searchInput = document.getElementById('crate-search-input');
      const clearBtn = document.getElementById('clear-search-btn');
      const searchHint = document.getElementById('search-hint');
      const searchInfo = document.getElementById('search-results-info');
      const searchCount = document.getElementById('search-results-count');
      
      if (!searchInput) return;
      
      // Remove old listeners by cloning
      const newSearchInput = searchInput.cloneNode(true);
      searchInput.parentNode.replaceChild(newSearchInput, searchInput);
      
      const newClearBtn = clearBtn.cloneNode(true);
      clearBtn.parentNode.replaceChild(newClearBtn, clearBtn);
      
      let searchTimeout;
      
      newSearchInput.addEventListener('input', (e) => {
        const query = e.target.value.trim();
        
        // Show/hide clear button
        if (query) {
          newClearBtn.classList.remove('hidden');
          searchHint.classList.add('hidden');
        } else {
          newClearBtn.classList.add('hidden');
          searchHint.classList.remove('hidden');
          searchInfo.classList.add('hidden');
        }
        
        // Debounce search
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
          this.performSearch(query);
        }, 300);
      });
      
      // Clear button
      newClearBtn.addEventListener('click', () => {
        newSearchInput.value = '';
        newClearBtn.classList.add('hidden');
        searchHint.classList.remove('hidden');
        searchInfo.classList.add('hidden');
        this.performSearch('');
      });
    }
    
    async performSearch(query) {
      // Prevent multiple simultaneous searches
      if (this.isLoading) {
        return;
      }
      
      // Reset state and clear container FIRST
      this.currentOffset = 0;
      this.hasMore = query ? false : true; // Disable infinite scroll during search
      this.endOfContent.classList.add('hidden');
      this.counterTop.classList.add('hidden');
      this.counterBottom.classList.add('hidden');
      
      // Clear container
      if (this.container) {
        this.container.innerHTML = '';
      }
      
      if (!query) {
        // No search query - load normal playlists
        this.loadPlaylists();
        return;
      }
      
      // Perform search
      this.isLoading = true;
      this.loadingSpinner.classList.remove('hidden');
      
      // Track search query
      if (window.trackSearch) {
        window.trackSearch(query);
      }
      
      try {
        const url = `/api/playlists?search=${encodeURIComponent(query)}&per_page=100`;
        const response = await fetch(url);
        const data = await response.json();
        
        if (data.playlists && data.playlists.length > 0) {
          data.playlists.forEach(playlist => {
            this.renderPlaylist(playlist);
          });
          
          // Show search results count
          const searchInfo = document.getElementById('search-results-info');
          const searchCount = document.getElementById('search-results-count');
          searchCount.textContent = data.playlists.length;
          searchInfo.classList.remove('hidden');
        } else {
          // No results
          this.container.innerHTML = `
            <div class="text-center py-20">
              <div class="text-6xl mb-4">üì¶</div>
              <h3 class="text-2xl font-bold text-white mb-4">No Playlists Found</h3>
              <p class="text-gray-400 mb-6">Couldn't find any playlists matching "${query}"</p>
              <div class="space-y-2">
                <p class="text-gray-500 text-sm font-semibold">Try searching for:</p>
                <p class="text-gray-400 text-sm">
                  <span class="inline-block bg-gray-800 px-3 py-1 rounded-full mx-1">Artists:</span> protoje, chronixx, damian marley, nas
                </p>
                <p class="text-gray-400 text-sm">
                  <span class="inline-block bg-gray-800 px-3 py-1 rounded-full mx-1">Vibes:</span> roots, dubwise, steppers, conscious
                </p>
                <p class="text-gray-400 text-sm">
                  <span class="inline-block bg-gray-800 px-3 py-1 rounded-full mx-1">Styles:</span> reggae, hip-hop, dub, dancehall
                </p>
              </div>
            </div>
          `;
          const searchInfo = document.getElementById('search-results-info');
          searchInfo.classList.add('hidden');
        }
        
        this.endOfContent.classList.remove('hidden');
        
      } catch (error) {
        console.error('Error searching playlists:', error);
      } finally {
        this.isLoading = false;
        this.loadingSpinner.classList.add('hidden');
      }
    }
    
    setupTreeToggleHandlers() {
      // Set up click handlers for all tree headers
      document.querySelectorAll('[data-tree-toggle]').forEach(header => {
        // Remove any old listeners by cloning and replacing
        const newHeader = header.cloneNode(true);
        header.parentNode.replaceChild(newHeader, header);
        
        newHeader.addEventListener('click', (e) => {
          const toggleId = newHeader.dataset.treeToggle;
          const categoryId = newHeader.dataset.categoryId;
          const categorySlug = newHeader.dataset.categorySlug;
          
          // Toggle the tree section
          const content = document.getElementById(toggleId + '-content');
          const arrow = document.getElementById(toggleId + '-arrow');
          
          if (content && arrow) {
            const isHidden = content.classList.contains('hidden');
            
            if (isHidden) {
              content.classList.remove('hidden');
              arrow.style.transform = 'rotate(90deg)';
            } else {
              content.classList.add('hidden');
              arrow.style.transform = 'rotate(0deg)';
            }
          }
          
          // Select the category and load playlists
          if (categoryId) {
            showOnlyFamilyByChildCategory(parseInt(categoryId));
            this.selectCategory(categoryId, '', '');
            if (categorySlug) {
              updateUrl(categorySlug);
            }
          }
        });
      });
    }
    
    setupInfiniteScroll() {
      // Clean up existing observer if any
      if (this.observer) {
        this.observer.disconnect();
      }
      
      this.observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting && this.hasMore && !this.isLoading) {
            this.loadPlaylists();
          }
        });
      });
      
      this.observer.observe(this.loadingSpinner);
    }
    
    cleanup() {
      if (this.observer) {
        this.observer.disconnect();
        this.observer = null;
      }
    }
    
    setupCategoryButtons() {
      // Only add listeners to child category buttons (not tree headers)
      document.querySelectorAll('.category-btn').forEach(btn => {
        // Remove old listeners by cloning
        const newBtn = btn.cloneNode(true);
        btn.parentNode.replaceChild(newBtn, btn);
        
        newBtn.addEventListener('click', (e) => {
          e.stopPropagation(); // Prevent parent handlers from firing
          
          const categoryId = newBtn.dataset.categoryId;
          const categoryName = newBtn.dataset.categoryName || '';
          const categoryColor = newBtn.dataset.categoryColor || '';
          const categorySlug = newBtn.dataset.categorySlug || '';
          
          // Select the category
          this.selectCategory(categoryId, categoryName, categoryColor);
          
          // Update URL
          if (categorySlug) {
            updateUrl(categorySlug);
          }
          
          // Hide other families and show only the one containing this category
          showOnlyFamilyByChildCategory(parseInt(categoryId));
        });
      });
    }
    
    selectCategory(categoryId, categoryName, categoryColor) {
      // Update active button - reset all buttons
      document.querySelectorAll('.category-btn').forEach(b => {
        b.classList.remove('text-yellow-400', 'active');
        b.classList.add('text-gray-300');
      });
      
      // Highlight the selected category button
      const targetButton = document.querySelector(`[data-category-id="${categoryId}"]`);
      if (targetButton) {
        targetButton.classList.remove('text-gray-300');
        targetButton.classList.add('text-yellow-400', 'active');
      }
      
      // Show "Show All" button
      const showAllContainer = document.getElementById('show-all-container');
      showAllContainer.style.display = 'block';
      
      // Reset and load playlists for this category
      this.currentCategory = categoryId;
      this.currentOffset = 0;
      this.hasMore = true;
      this.container.innerHTML = '';
      this.endOfContent.classList.add('hidden');
      
      this.loadPlaylists();
      
      // Expand selected category and hide others
      if (categoryId) {
        showOnlyFamilyByChildCategory(categoryId);
      } else {
        // Show all families if "Show All" is selected
        document.querySelectorAll('[id^="family-"][id$="-node"]').forEach(node => {
          node.style.display = 'block';
        });
      }
      
      // Keep total site count - don't reset when switching categories
      
      // Hide counters while loading new category
      this.counterTop.classList.add('hidden');
      this.counterBottom.classList.add('hidden');
      
      // Scroll to show "Show All Playlists" button and ensure category tree is visible
      setTimeout(() => {
        const showAllContainer = document.getElementById('show-all-container');
        if (showAllContainer) {
          showAllContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
        } else {
          // Fallback to playlists section if show-all button not visible
          const playlistsSection = document.getElementById('playlists-section');
          if (playlistsSection) {
            playlistsSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }
        }
      }, 100);
    }
    
    async loadPlaylists() {
      if (this.isLoading) return;
      
      this.isLoading = true;
      this.loadingSpinner.classList.remove('hidden');
      
      try {
        const perPage = 30;
        const url = this.currentCategory 
          ? `/api/categories/${this.currentCategory}/playlists?offset=${this.currentOffset}&per_page=${perPage}`
          : `/api/playlists?${this.currentOffset === 0 ? 'all=true' : 'offset='+this.currentOffset+'&per_page='+perPage}`;
          
        const response = await fetch(url);
        const data = await response.json();
        
        if (data.playlists && data.playlists.length > 0) {
          data.playlists.forEach(playlist => {
            this.renderPlaylist(playlist);
          });
          
          this.currentOffset += data.playlists.length;
          this.hasMore = data.has_more; // will be false when all=true
          
          // Update total site count ONLY on FIRST load with all=true (no category, offset was 0)
          if (!this.currentCategory && this.currentOffset > 0 && !this.hasMore && this.totalPlaylistsOnSite === 0) {
            this.totalPlaylistsOnSite = data.playlists.length;
          }
        } else {
          this.hasMore = false;
        }
        
        // Update counters
        this.updateCounters();
        
        if (!this.hasMore) {
          this.endOfContent.classList.remove('hidden');
        }
        
      } catch (error) {
        console.error('Error loading playlists:', error);
      } finally {
        this.isLoading = false;
        this.loadingSpinner.classList.add('hidden');
      }
    }
    
    renderPlaylist(playlist) {
      const playlistElement = document.createElement('div');
      playlistElement.className = 'group cursor-pointer transform transition-all duration-300 hover:-translate-y-1';
      playlistElement.onclick = () => window.open(playlist.spotify_url, '_blank');
      
      playlistElement.innerHTML = `
        <div class="relative overflow-hidden rounded-2xl bg-gradient-to-br from-gray-900 to-gray-800 p-6 border border-gray-700/50 hover:border-yellow-500/50 shadow-lg hover:shadow-2xl hover:shadow-yellow-500/20 transition-all duration-300">
          <!-- Subtle shine effect on hover -->
          <div class="absolute inset-0 bg-gradient-to-br from-transparent via-white/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
          
          <div class="relative flex flex-col md:flex-row gap-6 items-start">
            <!-- Album Cover with enhanced styling -->
            <div class="w-full md:w-48 flex justify-center md:justify-start flex-shrink-0">
              ${playlist.cover_image_url ? 
                `<div class="relative">
                  <img src="${playlist.cover_image_url}" alt="${playlist.title}" class="w-48 h-48 object-cover rounded-xl shadow-xl ring-2 ring-gray-700 group-hover:ring-yellow-500/50 transition-all duration-300">
                  <div class="absolute inset-0 rounded-xl bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                </div>` :
                `<div class="w-48 h-48 bg-gradient-to-br from-gray-800 to-gray-900 rounded-xl flex-shrink-0 flex items-center justify-center shadow-xl ring-2 ring-gray-700">
                  <div class="text-5xl">üéµ</div>
                </div>`
              }
            </div>
            
            <!-- Content -->
            <div class="flex-1 w-full md:w-auto min-w-0">
              <h4 class="text-2xl font-bold text-white mb-4 text-center md:text-left group-hover:text-yellow-400 transition-colors line-clamp-2">
                ${playlist.title}
              </h4>
              
              <!-- Metadata row with better styling -->
              <div class="flex flex-wrap items-center gap-3 text-sm mb-4 justify-center md:justify-start">
                <span class="px-3 py-1.5 bg-gray-800/80 rounded-full text-yellow-400 font-semibold border border-gray-700">
                  üéµ ${playlist.track_count} tracks
                </span>
                ${playlist.duration ? `<span class=\"text-gray-400\">‚Ä¢ ${playlist.duration}</span>` : ''}
                <button class="px-4 py-1.5 rounded-full bg-green-600 text-white font-semibold hover:bg-green-500 shadow-md hover:shadow-lg hover:shadow-green-500/30 transition-all duration-200" onclick="event.stopPropagation(); trackSpotifyOpen(${playlist.id}, 'regular', '${playlist.spotify_url}')">
                  ‚ñ∂Ô∏è Open on Spotify
                </button>
              </div>
              
              <!-- Social Media Share Buttons -->
              <div class="flex flex-wrap items-center gap-2 mb-3 justify-center md:justify-start">
                <!-- Instagram Share -->
                <button 
                  class="flex items-center gap-1 px-2 py-1.5 rounded-lg transition-all duration-200 group hover:scale-105 shadow-md hover:shadow-lg"
                  style="background: linear-gradient(45deg, #833AB4 0%, #E1306C 50%, #FD1D1D 100%);"
                  onclick="event.stopPropagation(); shareToInstagram('${playlist.title.replace(/'/g, "\\'")}', '${playlist.spotify_url}')"
                  title="Share on Instagram">
                  <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/>
                  </svg>
                </button>
                
                <!-- X (Twitter) Share -->
                <button 
                  class="flex items-center gap-1 px-2 py-1.5 rounded-lg bg-black hover:bg-gray-800 transition-all duration-200 group hover:scale-105 shadow-md hover:shadow-lg"
                  onclick="event.stopPropagation(); shareToX('${playlist.title.replace(/'/g, "\\'")}', '${playlist.spotify_url}')"
                  title="Share on X (Twitter)">
                  <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
                  </svg>
                </button>
                
                <!-- Mixcloud Share -->
                <button 
                  class="flex items-center gap-1 px-2 py-1.5 rounded-lg transition-all duration-200 group hover:scale-105 shadow-md hover:shadow-lg"
                  style="background: linear-gradient(135deg, #314455 0%, #52AAC6 100%);"
                  onclick="event.stopPropagation(); shareToMixcloud('${playlist.title.replace(/'/g, "\\'")}', '${playlist.spotify_url}')"
                  title="Share on Mixcloud">
                  <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M2.462 8.596l1.372 6.49h.297l1.368-6.49h1.368l1.368 6.49h.297l1.368-6.49h1.368v7.78h-1.368v-1.297h-.297v1.297H8.388v-1.297h-.297v1.297H6.723v-1.297h-.297v1.297H5.058v-1.297h-.297v1.297H3.393V8.596h1.368zm11.712 0v7.78h-1.368V8.596h1.368zm3.405 0v7.78h-1.368V8.596h1.368zm3.405 0v7.78h-1.368V8.596h1.368zm3.405 0v7.78h-1.368V8.596h1.368zm3.405 0v7.78h-1.368V8.596h1.368z"/>
                  </svg>
                </button>
              </div>
              <!-- Category tags with improved styling -->
              <div class="flex flex-wrap gap-2 items-start justify-center md:justify-start">
                ${playlist.categories
                  .sort((a, b) => {
                    if (a.is_root && !b.is_root) return -1;
                    if (!a.is_root && b.is_root) return 1;
                    return a.name.localeCompare(b.name);
                  })
                  .map(category => 
                    `<button class=\"category-tag-btn px-3 py-1.5 rounded-full text-xs font-semibold hover:scale-110 hover:-translate-y-0.5 transition-all duration-200 shadow-md hover:shadow-lg ${category.is_root ? 'bg-gradient-to-r from-gray-800 to-gray-700 text-gray-100 border-2 border-gray-600 hover:border-yellow-500/50 ring-1 ring-gray-600/50' : 'border border-gray-600/50 hover:border-current'}\"
                     data-category-id=\"${category.id}\" 
                     data-category-name=\"${category.name}\"
                     data-category-color=\"${category.color}\"
                     data-category-slug=\"${category.slug}\"
                     data-is-root=\"${category.is_root}\"
                      onclick=\"event.stopPropagation(); window.playlistLoader.selectCategory(${category.id}, '${category.name}', '${category.color}'); showOnlyFamilyByChildCategory(${category.id}); updateUrl('${category.slug}')\">`
                      + (category.is_root ? category.name : '‚Ü≥ ' + category.name) +
                    `</button>`
                  ).join('')}
              </div>
            </div>
          </div>
        </div>
      `;
      
      this.container.appendChild(playlistElement);

      // Style non-root category tags after insertion for reliable rendering
      const tagButtons = playlistElement.querySelectorAll('.category-tag-btn');
      tagButtons.forEach(btn => {
        const isRoot = btn.dataset.isRoot === 'true';
        if (isRoot) return;
        const hex = (btn.dataset.categoryColor || '').trim();
        const bg = isValidHex(hex) ? hex : '#FDE68A';
        const text = getReadableTextColor(bg);
        btn.style.backgroundColor = bg;
        btn.style.color = text;
        btn.style.border = `1px solid ${bg}`;
      });
    }
    
    updateCounters() {
      const currentCount = this.container.children.length;
      const totalCount = this.totalPlaylistsOnSite || currentCount;
      
      // Update counter text
      document.getElementById('current-count-top').textContent = currentCount;
      document.getElementById('total-count-top').textContent = totalCount;
      document.getElementById('current-count-bottom').textContent = currentCount;
      document.getElementById('total-count-bottom').textContent = totalCount;
      
      // Show/hide counters
      if (currentCount > 0) {
        this.counterTop.classList.remove('hidden');
        this.counterBottom.classList.remove('hidden');
      } else {
        this.counterTop.classList.add('hidden');
        this.counterBottom.classList.add('hidden');
      }
    }
  }

  // Collapse all other families and show only the selected one
  function showOnlyFamilyByChildCategory(selectedId) {
    // Find which family node contains the selected button
    const selectedBtn = document.querySelector(`[data-category-id="${selectedId}"]`);
    if (!selectedBtn) return;
    const familyNode = selectedBtn.closest('[id^="family-"][id$="-node"]');
    const allFamilies = document.querySelectorAll('[id^="family-"][id$="-node"]');
    
    allFamilies.forEach(node => {
      if (familyNode && node !== familyNode) {
        // Hide other families and collapse them
        node.style.display = 'none';
        const content = node.querySelector('.tree-content');
        const arrow = node.querySelector('.tree-arrow');
        if (content && arrow) {
          content.classList.add('hidden');
          arrow.style.transform = 'rotate(0deg)';
        }
      } else {
        // Show the selected family
        node.style.display = 'block';
      }
    });

    // Ensure Show All appears
    const showAllContainer = document.getElementById('show-all-container');
    if (showAllContainer) showAllContainer.style.display = 'block';
  }

  // Collapse all tree sections
  function collapseAllTreeSections() {
    document.querySelectorAll('.tree-content').forEach(content => {
      content.classList.add('hidden');
    });
    document.querySelectorAll('.tree-arrow').forEach(arrow => {
      arrow.style.transform = 'rotate(0deg)';
    });
  }

  // Update URL without page refresh
  function updateUrl(categorySlug) {
    const newUrl = `/categories/${categorySlug}`;
    window.history.pushState({}, '', newUrl);
  }
  
  // Initialize when DOM is loaded (works with Turbo)
  function initializePlaylistLoader() {
    // Clean up any existing loader
    if (window.playlistLoader && typeof window.playlistLoader.cleanup === 'function') {
      window.playlistLoader.cleanup();
    }
    window.playlistLoader = new PlaylistLoader();

    // Hook up Show All to restore visibility of all families and collapse all sections
    const showAllContainer = document.getElementById('show-all-container');
    if (showAllContainer) {
      const btn = showAllContainer.querySelector('button');
      if (btn) {
        btn.addEventListener('click', () => {
          // Show all families
          document.querySelectorAll('[id^="family-"][id$="-node"]').forEach(node => {
            node.style.display = 'block';
          });
          // Collapse all tree sections
          collapseAllTreeSections();
          // Reset URL to home
          window.history.pushState({}, '', '/');
        });
      }
    }
  }
  
  // Style featured category tags
  function styleFeaturedCategoryTags() {
    document.querySelectorAll('.featured-category-tag').forEach(tag => {
      const hex = (tag.dataset.color || '').trim();
      const bg = isValidHex(hex) ? hex : '#FDE68A';
      const text = getReadableTextColor(bg);
      tag.style.backgroundColor = bg;
      tag.style.color = text;
    });
  }

  // Initialize on both DOMContentLoaded (first page load) and turbo:load (Turbo navigation)
  document.addEventListener('DOMContentLoaded', () => {
    initializePlaylistLoader();
    styleFeaturedCategoryTags();
  });
  
  document.addEventListener('turbo:load', () => {
    initializePlaylistLoader();
    styleFeaturedCategoryTags();
  });
  
  // Cleanup before Turbo caches the page
  document.addEventListener('turbo:before-cache', () => {
    if (window.playlistLoader && typeof window.playlistLoader.cleanup === 'function') {
      window.playlistLoader.cleanup();
    }
  });

  // --- Interaction Functions ---
  
  
  // Social Media Share Functions
  function shareToInstagram(title, url) {
    const text = `Check out this playlist: ${title}`;
    // Copy to clipboard since Instagram doesn't have direct share URLs
    navigator.clipboard.writeText(`${text} ${url}`).then(() => {
      alert('Link copied! Paste it in your Instagram story or post.');
      trackShare(0, 'instagram', `${text} - ${url}`);
    }).catch(() => {
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = `${text} ${url}`;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      alert('Link copied! Paste it in your Instagram story or post.');
      trackShare(0, 'instagram', `${text} - ${url}`);
    });
  }
  
  function shareToX(title, url) {
    const text = `Check out this playlist: ${title}`;
    const tweetText = encodeURIComponent(`${text} ${url}`);
    const twitterUrl = `https://twitter.com/intent/tweet?text=${tweetText}`;
    window.open(twitterUrl, '_blank');
    trackShare(0, 'twitter', `${text} - ${url}`);
  }
  
  function shareToMixcloud(title, url) {
    const text = `Check out this playlist: ${title}`;
    // Copy to clipboard since Mixcloud doesn't have direct share URLs
    navigator.clipboard.writeText(`${text} ${url}`).then(() => {
      alert('Link copied! Paste it in your Mixcloud post or message.');
      trackShare(0, 'mixcloud', `${text} - ${url}`);
    }).catch(() => {
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = `${text} ${url}`;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      alert('Link copied! Paste it in your Mixcloud post or message.');
      trackShare(0, 'mixcloud', `${text} - ${url}`);
    });
  }
  
  // Copy link to clipboard with tracking
  function copyToClipboard(playlistId, title, url) {
    navigator.clipboard.writeText(url).then(() => {
      trackShare(playlistId, 'copy_link', url);
      
      // Show success message
      const message = document.createElement('div');
      message.className = 'fixed top-4 left-1/2 transform -translate-x-1/2 bg-green-600 text-white px-6 py-3 rounded-lg shadow-xl z-50 animate-pulse';
      message.textContent = '‚úÖ Link copied to clipboard!';
      document.body.appendChild(message);
      
      setTimeout(() => {
        message.remove();
      }, 2000);
    }).catch(err => {
      console.error('Could not copy:', err);
    });
  }
  
  // Track share event
  async function trackShare(playlistId, platform, content) {
    try {
      await fetch(`/api/playlists/${playlistId}/share`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          platform: platform,
          shared_content: content
        })
      });
    } catch (error) {
      console.error('Error tracking share:', error);
    }
  }
  
  // Track Spotify open
  async function trackSpotifyOpen(playlistId, location, url) {
    console.log('trackSpotifyOpen called:', { playlistId, location, url });
    
    try {
      // Get analytics session ID
      const sessionId = localStorage.getItem('analytics_session_id') || 'unknown';
      
      await fetch(`/api/playlists/${playlistId}/spotify_open`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          location: location, // 'featured', 'regular', 'category', 'search', 'whats_new'
          session_id: sessionId
        })
      });
      console.log('Spotify open tracked successfully');
    } catch (error) {
      console.error('Error tracking Spotify open:', error);
    }
    
    // Open Spotify regardless of tracking success
    console.log('Opening Spotify URL:', url);
    window.open(url, '_blank');
  }
  
  // Random Dig - Open random track with playlist context
  async function randomDig() {
    const btn = document.getElementById('random-dig-btn');
    btn.classList.add('animate-spin', 'opacity-50');
    btn.disabled = true;
    
    try {
      const response = await fetch('/api/random_track');
      const data = await response.json();
      
      if (data.track && data.playlist) {
        // Show modal with track and playlist info
        showRandomTrackModal(data.track, data.playlist);
      }
    } catch (error) {
      console.error('Error getting random track:', error);
    } finally {
      setTimeout(() => {
        btn.classList.remove('animate-spin', 'opacity-50');
        btn.disabled = false;
      }, 1000);
    }
  }
  
  // Show random track modal
  function showRandomTrackModal(track, playlist) {
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black/90 backdrop-blur-sm flex items-center justify-center z-50 animate-fade-in p-4 overflow-y-auto';
    
    modal.innerHTML = `
      <div class="bg-gradient-to-br from-gray-900 to-gray-800 rounded-2xl p-6 max-w-md w-full my-4 border-2 border-yellow-600/70 shadow-2xl transform animate-scale-in max-h-[90vh] overflow-y-auto">
        <div class="text-center mb-4">
          <div class="text-4xl mb-2">üíøüìÄ</div>
          <h3 class="text-2xl font-bold text-yellow-500 mb-1">Pulled From The Crates</h3>
          <p class="text-gray-400 text-xs font-medium uppercase tracking-wider">Random Selection</p>
        </div>
        
        ${track.image_url ? `<img src="${track.image_url}" alt="${track.name}" class="w-full rounded-xl mb-4 shadow-2xl ring-2 ring-yellow-500/50">` : ''}
        
        <div class="text-center mb-4">
          <h4 class="text-xl font-bold text-white mb-2 leading-tight line-clamp-2">${track.name}</h4>
          <p class="text-gray-200 text-base mb-1 font-medium line-clamp-1">${track.artist}</p>
          ${track.album ? `<p class="text-gray-400 text-sm line-clamp-1">${track.album}</p>` : ''}
        </div>
        
        <div class="bg-gradient-to-r from-yellow-900/30 to-amber-900/30 rounded-lg p-3 mb-4 border border-yellow-600/40">
          <p class="text-xs text-gray-500 mb-1 uppercase tracking-wider">Found in crate:</p>
          <p class="text-sm font-bold text-yellow-500 line-clamp-2">${playlist.title}</p>
        </div>
        
        <div class="flex gap-2 mb-3">
          <button 
            onclick="trackSpotifyOpen(${playlist.id}, 'random_dig', '${track.external_url}'); this.closest('.fixed').remove();"
            class="flex-1 px-4 py-3 bg-green-600 hover:bg-green-500 text-white font-bold rounded-xl shadow-lg hover:shadow-green-500/50 transition-all duration-200 text-sm">
            ‚ñ∂Ô∏è Play on Spotify
          </button>
          <button 
            onclick="this.closest('.fixed').remove();"
            class="px-4 py-3 bg-gray-700 hover:bg-gray-600 text-white font-semibold rounded-xl transition-all duration-200">
            ‚úï
          </button>
        </div>
        
        <div class="text-center">
          <button 
            onclick="this.closest('.fixed').remove(); setTimeout(() => randomDig(), 100);"
            class="text-yellow-500 hover:text-yellow-400 text-xs font-semibold underline">
            üîÑ Pull Another One
          </button>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
    
    // Click outside to close
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.remove();
      }
    });
  }

  // --- Color utilities ---
  function isValidHex(hex) {
    return /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(hex);
  }

  function hexToRgb(hex) {
    let h = hex.replace('#', '');
    if (h.length === 3) {
      h = h.split('').map(c => c + c).join('');
    }
    const num = parseInt(h, 16);
    return { r: (num >> 16) & 255, g: (num >> 8) & 255, b: num & 255 };
  }

  function getReadableTextColor(hexBg) {
    const { r, g, b } = hexToRgb(hexBg);
    const toLinear = (v) => {
      v /= 255;
      return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
    };
    const R = toLinear(r), G = toLinear(g), B = toLinear(b);
    const luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;
    return luminance > 0.5 ? '#111111' : '#FFFFFF';
  }

  // Relative time function for track timestamps
  function updateRelativeTimes() {
    const timeElements = document.querySelectorAll('.relative-time');
    const now = Math.floor(Date.now() / 1000);
    
    timeElements.forEach(element => {
      const timestamp = parseInt(element.parentElement.dataset.timestamp);
      const diff = now - timestamp;
      
      let relativeTime;
      if (diff < 60) {
        relativeTime = 'just now';
      } else if (diff < 3600) {
        const minutes = Math.floor(diff / 60);
        relativeTime = `${minutes}m ago`;
      } else if (diff < 86400) {
        const hours = Math.floor(diff / 3600);
        relativeTime = `${hours}h ago`;
      } else if (diff < 604800) {
        const days = Math.floor(diff / 86400);
        relativeTime = `${days}d ago`;
      } else {
        const weeks = Math.floor(diff / 604800);
        relativeTime = `${weeks}w ago`;
      }
      
      element.textContent = relativeTime;
    });
  }

  // Update relative times on page load and every minute
  document.addEventListener('DOMContentLoaded', updateRelativeTimes);
  document.addEventListener('turbo:load', updateRelativeTimes);
  setInterval(updateRelativeTimes, 60000); // Update every minute

  // Add event listeners for Spotify open buttons
  function setupSpotifyButtons() {
    document.querySelectorAll('.spotify-open-btn').forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        const playlistId = this.dataset.playlistId;
        const location = this.dataset.location;
        const spotifyUrl = this.dataset.spotifyUrl;
        console.log('Spotify button clicked:', { playlistId, location, spotifyUrl });
        trackSpotifyOpen(playlistId, location, spotifyUrl);
      });
    });
    console.log('Setup Spotify buttons:', document.querySelectorAll('.spotify-open-btn').length);
  }

  // Setup buttons on page load and Turbo navigation
  document.addEventListener('DOMContentLoaded', setupSpotifyButtons);
  document.addEventListener('turbo:load', setupSpotifyButtons);
  
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .category-btn {
    position: relative;
    overflow: hidden;
  }
  
  .category-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
    transition: left 0.5s;
  }
  
  .category-btn:hover::before {
    left: 100%;
  }
</style>