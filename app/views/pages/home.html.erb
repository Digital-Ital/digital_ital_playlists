<div class="min-h-screen">
  <!-- Hero Section -->
  <section class="relative overflow-hidden">
    <!-- Animated Background -->
    <div class="absolute inset-0 opacity-20">
      <div class="absolute top-0 left-0 w-full h-full bg-gradient-to-br from-yellow-400 via-red-500 to-green-500 animate-pulse"></div>
      <div class="absolute top-10 left-10 w-32 h-32 bg-yellow-400 rounded-full blur-3xl animate-bounce"></div>
      <div class="absolute top-40 right-20 w-24 h-24 bg-red-500 rounded-full blur-2xl animate-pulse delay-1000"></div>
      <div class="absolute bottom-20 left-1/3 w-28 h-28 bg-green-500 rounded-full blur-3xl animate-bounce delay-500"></div>
    </div>
    
    <div class="relative z-10 container mx-auto px-6 py-20">
      <!-- Header -->
      <div class="text-center mb-16">
        <h1 class="text-6xl md:text-8xl font-bold mb-6">
          <span class="bg-gradient-to-r from-yellow-400 via-red-500 to-green-500 bg-clip-text text-transparent">
            Digital Ital Spotify Crates
          </span>
        </h1>
        
        <!-- Social Media Links -->
        <div class="flex justify-center items-center gap-4 mb-4 flex-wrap">
          <a href="https://www.instagram.com/digital.ital/" target="_blank" class="group flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-purple-600 to-pink-600 rounded-full hover:from-purple-500 hover:to-pink-500 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-purple-500/25">
            <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/>
            </svg>
            <span class="text-white font-semibold">Instagram</span>
          </a>
          
          <a href="https://x.com/Digital_Ital" target="_blank" class="group flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-black to-gray-800 rounded-full hover:from-gray-800 hover:to-gray-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-gray-500/25">
            <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
            </svg>
            <span class="text-white font-semibold">X (Twitter)</span>
          </a>
          
          <a href="https://www.mixcloud.com/Digital_Ital/" target="_blank" class="group flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-orange-500 to-red-600 rounded-full hover:from-orange-400 hover:to-red-500 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-orange-500/25">
            <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 24 24">
              <path d="M2.462 8.596l1.372 6.49h.297l1.368-6.49h1.368l1.368 6.49h.297l1.368-6.49h1.368v7.78h-1.368v-1.297h-.297v1.297H8.388v-1.297h-.297v1.297H6.723v-1.297h-.297v1.297H5.058v-1.297h-.297v1.297H3.393V8.596h1.368zm11.712 0v7.78h-1.368V8.596h1.368zm3.405 0v7.78h-1.368V8.596h1.368zm3.405 0v7.78h-1.368V8.596h1.368zm3.405 0v7.78h-1.368V8.596h1.368zm3.405 0v7.78h-1.368V8.596h1.368z"/>
            </svg>
            <span class="text-white font-semibold">Mixcloud</span>
          </a>
        </div>
        
        <!-- What's New Link -->
        <div class="flex justify-center mt-6">
          <%= link_to whats_new_path, class: "group flex items-center gap-3 px-8 py-4 bg-gradient-to-r from-yellow-500 via-orange-500 to-red-500 rounded-full hover:from-yellow-400 hover:via-orange-400 hover:to-red-400 transition-all duration-300 transform hover:scale-105 shadow-xl hover:shadow-orange-500/50" do %>
            <span class="text-2xl">üéµ</span>
            <span class="text-white font-bold text-lg">What's New</span>
            <span class="text-2xl">‚ú®</span>
          <% end %>
        </div>
      </div>
      
      <!-- Featured Mix Section -->
      <div class="text-center mt-16 mb-8">
        <h3 class="text-2xl font-bold text-white mb-6">
          <span class="bg-gradient-to-r from-orange-400 to-red-500 bg-clip-text text-transparent">
            üéß Featured Mix
          </span>
        </h3>
        <div class="max-w-2xl mx-auto">
          <iframe width="100%" height="120" src="https://player-widget.mixcloud.com/widget/iframe/?hide_cover=1&feed=%2FDigital_Ital%2Fdubwise-raw-dancehall-dub-rap-reggae-fusion-20250904-131724%2F" frameborder="0" allow="encrypted-media; fullscreen; autoplay; idle-detection; speaker-selection; web-share;" class="rounded-lg shadow-lg"></iframe>
        </div>
      </div>
      
    </div>
  </section>

  <!-- Categories Navigation -->
  <section class="py-8">
    <div class="container mx-auto px-6 max-w-4xl">
      
      <!-- Show All Button -->
      <div id="show-all-container" class="text-center mb-6" style="display: none;">
        <button 
          class="category-btn px-6 py-3 bg-gradient-to-r from-yellow-500 to-yellow-600 text-black rounded-lg font-bold text-lg hover:from-yellow-400 hover:to-yellow-500 transition-all duration-300 hover:scale-105 shadow-lg hover:shadow-yellow-500/25"
          data-category-id=""
        >
          üåç Show All Playlists
        </button>
      </div>
      
      <!-- Dynamic Collapsible Tree Structure -->
      <% if @main_families.any? %>
        <div class="space-y-4">
          <% @main_families.each do |family| %>
            <div class="tree-node" id="family-<%= family.id %>-node" data-family-id="<%= family.id %>">
              <% family_has_children = family.children.any? %>
              <div class="tree-header <%= family_has_children ? 'cursor-pointer' : '' %> flex items-center justify-between p-4 rounded-xl bg-gradient-to-r <%= family.family_color || 'from-gray-600/80 to-gray-500/80' %> hover:from-gray-500/90 hover:to-gray-400/90 transition-all duration-300 transform hover:scale-102 shadow-lg border-2 border-yellow-400/50" <%= family_has_children ? "onclick=\"toggleTreeSection('family-#{family.id}')\"" : '' %>>
                <div class="flex items-center gap-3">
                  <% if family_has_children %>
                    <span class="tree-arrow text-2xl text-yellow-300 transform transition-transform duration-200 font-bold" id="family-<%= family.id %>-arrow">‚ñ∂</span>
                  <% end %>
                  <button class="category-btn text-xl font-bold text-white drop-shadow-lg hover:text-yellow-300"
                          data-category-id="<%= family.id %>"
                          data-category-name="<%= family.name %>"
                          data-category-color="<%= family.color %>"
                          data-category-slug="<%= family.slug %>"
                          onclick="event.stopPropagation(); toggleTreeSection('family-<%= family.id %>'); showOnlyFamilyByChildCategory(<%= family.id %>); updateUrl('<%= family.slug %>');">
                    <%= family.family_emoji || 'üéµ' %> <%= family.name.upcase %> <%= family.family_emoji || 'üéµ' %>
                  </button>
                  <span class="px-3 py-1 bg-black/30 rounded-full text-sm font-bold text-yellow-300 border border-yellow-400/50">
                    <%= family.playlists.count %> playlists / <%= family.playlists.sum(:track_count) %> tracks
                  </span>
                </div>
              </div>
              <div class="tree-content hidden ml-6 mt-3 space-y-2 border-l-4 border-yellow-500/50 pl-4" id="family-<%= family.id %>-content">
                <!-- Family Root Categories -->
                <% family.children.order(:position, :name).each do |root_category| %>
                  <div class="tree-node">
                    <% root_has_children = root_category.children.any? %>
                    <div class="tree-header <%= root_has_children ? 'cursor-pointer' : '' %> flex items-center justify-between p-3 rounded-lg bg-gradient-to-r <%= family.family_color || 'from-gray-700/60 to-gray-600/60' %> hover:from-gray-600/70 hover:to-gray-500/70 transition-all duration-200 border border-gray-400/30" <%= root_has_children ? "onclick=\"toggleTreeSection('root-#{root_category.id}')\"" : '' %>>
                      <div class="flex items-center gap-2">
                        <% if root_has_children %>
                          <span class="tree-arrow text-lg text-yellow-300 transform transition-transform duration-200 font-bold" id="root-<%= root_category.id %>-arrow">‚ñ∂</span>
                        <% end %>
                        <button class="category-btn text-white hover:text-yellow-300 transition-colors font-bold text-lg" 
                                data-category-id="<%= root_category.id %>"
                                data-category-name="<%= root_category.name %>"
                                data-category-color="<%= root_category.color %>"
                                data-category-slug="<%= root_category.slug %>"
                                onclick="event.stopPropagation(); toggleTreeSection('root-<%= root_category.id %>'); showOnlyFamilyByChildCategory(<%= root_category.id %>); updateUrl('<%= root_category.slug %>');">
                          <%= root_category.emoji || 'üé∂' %> <%= root_category.name %>
                        </button>
                        <span class="px-2 py-1 bg-black/30 rounded text-xs font-bold text-yellow-300"><%= root_category.playlists.count %> playlists / <%= root_category.playlists.sum(:track_count) %> tracks</span>
                      </div>
                    </div>
                    <div class="tree-content hidden ml-6 mt-2 space-y-1" id="root-<%= root_category.id %>-content">
                      <% root_category.children.order(:position, :name).each do |child| %>
                        <div class="flex items-center gap-2 p-2 rounded-lg bg-gray-900/30 hover:bg-gray-800/50 transition-colors border border-gray-700/30">
                          <button class="category-btn text-gray-200 hover:text-yellow-400 transition-colors font-semibold" 
                                  data-category-id="<%= child.id %>"
                                  data-category-name="<%= child.name %>"
                                  data-category-color="<%= child.color %>"
                                  data-category-slug="<%= child.slug %>"
                                  onclick="window.playlistLoader.selectCategory(<%= child.id %>, '<%= child.name %>', '<%= child.color %>'); showOnlyFamilyByChildCategory(<%= child.id %>); updateUrl('<%= child.slug %>');">
                            ‚Ü≥ <%= child.emoji || 'üéµ' %> <%= child.name %>
                          </button>
                          <span class="px-2 py-0.5 bg-black/30 rounded text-xs font-bold text-gray-300">(<%= child.playlists.count %> / <%= child.playlists.sum(:track_count) %>)</span>
                        </div>
                      <% end %>
                    </div>
                  </div>
                <% end %>
              </div>
            </div>
          <% end %>
        </div>
      <% elsif @categories.any? %>
        <!-- Fallback: show root categories if no main families flagged -->
        <div class="space-y-4">
          <% @categories.each do |root_category| %>
            <div class="tree-node">
              <div class="tree-header cursor-pointer flex items-center justify-between p-4 rounded-xl bg-gradient-to-r from-gray-700/80 to-gray-600/80 hover:from-gray-600/90 hover:to-gray-500/90 transition-all duration-300 transform hover:scale-102 shadow-lg border-2 border-yellow-400/30" onclick="toggleTreeSection('rootonly-<%= root_category.id %>')">
                <div class="flex items-center gap-3">
                  <span class="tree-arrow text-2xl text-yellow-300 transform transition-transform duration-200 font-bold" id="rootonly-<%= root_category.id %>-arrow">‚ñ∂</span>
                  <span class="text-xl font-bold text-white drop-shadow-lg">
                    <%= root_category.emoji || 'üé∂' %> <%= root_category.name %>
                  </span>
                  <span class="px-3 py-1 bg-black/30 rounded-full text-sm font-bold text-yellow-300 border border-yellow-400/30">
                    <%= root_category.playlists.count %> playlists / <%= root_category.playlists.sum(:track_count) %> tracks
                  </span>
                </div>
              </div>
              <div class="tree-content hidden ml-6 mt-3 space-y-1 border-l-4 border-yellow-500/30 pl-4" id="rootonly-<%= root_category.id %>-content">
                <% root_category.children.each do |child| %>
                  <div class="flex items-center gap-2 p-2 rounded-lg bg-gray-900/30 hover:bg-gray-800/50 transition-colors border border-gray-700/30">
                    <button class="category-btn text-gray-200 hover:text-yellow-400 transition-colors font-semibold" 
                            data-category-id="<%= child.id %>"
                            data-category-color="<%= child.color %>"
                            onclick="window.playlistLoader.selectCategory(<%= child.id %>, '<%= child.name %>', '<%= child.color %>')">
                      ‚Ü≥ <%= child.emoji || 'üéµ' %> <%= child.name %>
                    </button>
                    <span class="px-2 py-0.5 bg-black/30 rounded text-xs font-bold text-gray-300">(<%= child.playlists.count %> / <%= child.playlists.sum(:track_count) %>)</span>
                  </div>
                <% end %>
              </div>
            </div>
          <% end %>
        </div>
      <% else %>
        <!-- Empty State -->
        <div class="text-center py-16">
          <div class="text-6xl mb-4">üéµ</div>
          <h3 class="text-2xl font-bold text-white mb-4">No Categories Yet</h3>
          <p class="text-gray-400 mb-6">Start building your music collection by adding categories and playlists through the admin panel.</p>
        </div>
      <% end %>
    </div>
  </section>

  <!-- Infinite Scroll Playlists -->
  <section id="playlists-section" class="py-16">
    <div class="container mx-auto px-6">
      <!-- Playlist Counter - Top -->
      <div id="playlist-counter-top" class="text-center mb-8 hidden">
        <div class="inline-block bg-gray-800/80 rounded-full px-6 py-3 border border-gray-600">
          <span class="text-yellow-400 font-bold text-lg">
            <span id="current-count-top">0</span> / <span id="total-count-top">0</span> playlists
          </span>
        </div>
      </div>
      
      <div id="playlists-container" class="grid grid-cols-1 gap-6">
        <!-- Playlists will be loaded here via JavaScript -->
      </div>
      
      <!-- Loading Spinner -->
      <div id="loading-spinner" class="text-center py-12 hidden">
        <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-yellow-400"></div>
        <p class="text-gray-400 mt-4">Loading more playlists...</p>
      </div>
      
      <!-- Playlist Counter - Bottom -->
      <div id="playlist-counter-bottom" class="text-center mt-8 hidden">
        <div class="inline-block bg-gray-800/80 rounded-full px-6 py-3 border border-gray-600">
          <span class="text-yellow-400 font-bold text-lg">
            <span id="current-count-bottom">0</span> / <span id="total-count-bottom">0</span> playlists
          </span>
        </div>
      </div>

      <!-- End of Content -->
      <div id="end-of-content" class="text-center py-12 hidden">
        <p class="text-gray-500">You've reached the end of the playlist collection</p>
        <div class="mt-4 text-4xl">üéµ</div>
      </div>
    </div>
  </section>
</div>

<script>
  class PlaylistLoader {
    constructor() {
      this.currentOffset = 0;
      this.currentCategory = null;
      this.isLoading = false;
      this.hasMore = true;
      this.totalPlaylistsOnSite = 0;
      this.container = document.getElementById('playlists-container');
      this.loadingSpinner = document.getElementById('loading-spinner');
      this.endOfContent = document.getElementById('end-of-content');
      this.counterTop = document.getElementById('playlist-counter-top');
      this.counterBottom = document.getElementById('playlist-counter-bottom');
      
      this.init();
    }
    
    init() {
      this.loadPlaylists();
      this.setupInfiniteScroll();
      this.setupCategoryButtons();
    }
    
    setupInfiniteScroll() {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting && this.hasMore && !this.isLoading) {
            this.loadPlaylists();
          }
        });
      });
      
      observer.observe(this.loadingSpinner);
    }
    
    setupCategoryButtons() {
      document.querySelectorAll('.category-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const categoryId = e.target.dataset.categoryId;
          
          // Update active button - reset all buttons
          document.querySelectorAll('.category-btn').forEach(b => {
            b.classList.remove('text-yellow-400', 'active');
            b.classList.add('text-gray-300');
          });
          
          // Highlight selected button
          e.target.classList.remove('text-gray-300');
          e.target.classList.add('text-yellow-400', 'active');
          
          // Show/hide "Show All" button
          const showAllContainer = document.getElementById('show-all-container');
          if (categoryId) {
            showAllContainer.style.display = 'block';
          } else {
            showAllContainer.style.display = 'none';
          }
          
          // Reset and load playlists
          this.currentCategory = categoryId || null;
          this.currentOffset = 0;
          this.hasMore = true;
          this.container.innerHTML = '';
          this.endOfContent.classList.add('hidden');
          
          this.loadPlaylists();
        });
      });
    }
    
    selectCategory(categoryId, categoryName, categoryColor) {
      // Update active button - reset all buttons
      document.querySelectorAll('.category-btn').forEach(b => {
        b.classList.remove('text-yellow-400', 'active');
        b.classList.add('text-gray-300');
      });
      
      // Highlight the selected category button
      const targetButton = document.querySelector(`[data-category-id="${categoryId}"]`);
      if (targetButton) {
        targetButton.classList.remove('text-gray-300');
        targetButton.classList.add('text-yellow-400', 'active');
      }
      
      // Show "Show All" button
      const showAllContainer = document.getElementById('show-all-container');
      showAllContainer.style.display = 'block';
      
      // Reset and load playlists for this category
      this.currentCategory = categoryId;
      this.currentOffset = 0;
      this.hasMore = true;
      this.container.innerHTML = '';
      this.endOfContent.classList.add('hidden');
      
      this.loadPlaylists();
      
      // Expand selected category and hide others
      if (categoryId) {
        showOnlyFamilyByChildCategory(categoryId);
      } else {
        // Show all families if "Show All" is selected
        document.querySelectorAll('[id^="family-"][id$="-node"]').forEach(node => {
          node.style.display = 'block';
        });
      }
      
      // Keep total site count - don't reset when switching categories
      
      // Hide counters while loading new category
      this.counterTop.classList.add('hidden');
      this.counterBottom.classList.add('hidden');
      
      // Scroll to show "Show All Playlists" button and ensure category tree is visible
      setTimeout(() => {
        const showAllContainer = document.getElementById('show-all-container');
        if (showAllContainer) {
          showAllContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
        } else {
          // Fallback to playlists section if show-all button not visible
          const playlistsSection = document.getElementById('playlists-section');
          if (playlistsSection) {
            playlistsSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }
        }
      }, 100);
    }
    
    async loadPlaylists() {
      if (this.isLoading) return;
      
      this.isLoading = true;
      this.loadingSpinner.classList.remove('hidden');
      
      try {
        const perPage = 30;
        const url = this.currentCategory 
          ? `/api/categories/${this.currentCategory}/playlists?offset=${this.currentOffset}&per_page=${perPage}`
          : `/api/playlists?${this.currentOffset === 0 ? 'all=true' : 'offset='+this.currentOffset+'&per_page='+perPage}`;
          
        const response = await fetch(url);
        const data = await response.json();
        
        if (data.playlists && data.playlists.length > 0) {
          data.playlists.forEach(playlist => {
            this.renderPlaylist(playlist);
          });
          
          this.currentOffset += data.playlists.length;
          this.hasMore = data.has_more; // will be false when all=true
          
          // Update total site count ONLY on initial load of all playlists (no category selected)
          if (!this.currentCategory && this.currentOffset === data.playlists.length && !this.hasMore) {
            this.totalPlaylistsOnSite = data.playlists.length;
          }
        } else {
          this.hasMore = false;
        }
        
        // Update counters
        this.updateCounters();
        
        if (!this.hasMore) {
          this.endOfContent.classList.remove('hidden');
        }
        
      } catch (error) {
        console.error('Error loading playlists:', error);
      } finally {
        this.isLoading = false;
        this.loadingSpinner.classList.add('hidden');
      }
    }
    
    renderPlaylist(playlist) {
      const playlistElement = document.createElement('div');
      playlistElement.className = 'group cursor-pointer transform transition-all duration-300 hover:scale-105';
      playlistElement.onclick = () => window.open(playlist.spotify_url, '_blank');
      
      playlistElement.innerHTML = `
        <div class="relative overflow-hidden rounded-2xl bg-gray-900 p-4 hover:shadow-xl transition">
          <div class="flex flex-col md:flex-row gap-4 items-start">
            <div class="w-full md:w-40 flex justify-center md:justify-start">
              ${playlist.cover_image_url ? 
                `<img src="${playlist.cover_image_url}" alt="${playlist.title}" class="w-40 h-40 object-cover rounded-xl flex-shrink-0">` :
                `<div class=\"w-40 h-40 bg-gray-800 rounded-xl flex-shrink-0 flex items-center justify-center\"><div class=\"text-3xl\">üéµ</div></div>`
              }
            </div>
            <div class="flex-1 w-full md:w-auto">
              <h4 class="text-2xl font-semibold text-white mb-2 text-center md:text-left">
                ${playlist.title}
              </h4>
              ${playlist.description ? `<p class=\"text-gray-300 text-sm mb-3 text-center md:text-left\">${playlist.description}</p>` : ''}
              <div class="flex flex-wrap items-center gap-3 text-sm text-gray-400 mb-3 justify-center md:justify-start">
                <span>${playlist.track_count} tracks</span>
                ${playlist.duration ? `<span>‚Ä¢ ${playlist.duration}</span>` : ''}
                <button class="px-3 py-1 rounded-md bg-green-500 text-black font-semibold hover:bg-green-400" onclick="event.stopPropagation(); window.open('${playlist.spotify_url}','_blank')">Open on Spotify</button>
              </div>
              <div class="flex flex-wrap gap-2 items-start justify-center md:justify-start">
                ${playlist.categories
                  .sort((a, b) => {
                    if (a.is_root && !b.is_root) return -1;
                    if (!a.is_root && b.is_root) return 1;
                    return a.name.localeCompare(b.name);
                  })
                  .map(category => 
                    `<button class=\"category-tag-btn px-3 py-1.5 rounded-full text-xs hover:scale-105 transition-all duration-200 ${category.is_root ? 'bg-gradient-to-r from-gray-800/80 to-gray-700/80 text-gray-100 border border-gray-600 hover:from-gray-700/90 hover:to-gray-600/90 font-semibold shadow-lg' : ''}\"
                     data-category-id=\"${category.id}\" 
                     data-category-name=\"${category.name}\"
                     data-category-color=\"${category.color}\"
                     data-category-slug=\"${category.slug}\"
                     data-is-root=\"${category.is_root}\"
                      onclick=\"event.stopPropagation(); window.playlistLoader.selectCategory(${category.id}, '${category.name}', '${category.color}'); showOnlyFamilyByChildCategory(${category.id}); updateUrl('${category.slug}')\">`
                      + (category.is_root ? category.name : '‚Ü≥ ' + category.name) +
                    `</button>`
                  ).join('')}
              </div>
            </div>
          </div>
        </div>
      `;
      
      this.container.appendChild(playlistElement);

      // Style non-root category tags after insertion for reliable rendering
      const tagButtons = playlistElement.querySelectorAll('.category-tag-btn');
      tagButtons.forEach(btn => {
        const isRoot = btn.dataset.isRoot === 'true';
        if (isRoot) return;
        const hex = (btn.dataset.categoryColor || '').trim();
        const bg = isValidHex(hex) ? hex : '#FDE68A';
        const text = getReadableTextColor(bg);
        btn.style.backgroundColor = bg;
        btn.style.color = text;
        btn.style.border = `1px solid ${bg}`;
      });
    }
    
    updateCounters() {
      const currentCount = this.container.children.length;
      const totalCount = this.totalPlaylistsOnSite || currentCount;
      
      // Update counter text
      document.getElementById('current-count-top').textContent = currentCount;
      document.getElementById('total-count-top').textContent = totalCount;
      document.getElementById('current-count-bottom').textContent = currentCount;
      document.getElementById('total-count-bottom').textContent = totalCount;
      
      // Show/hide counters
      if (currentCount > 0) {
        this.counterTop.classList.remove('hidden');
        this.counterBottom.classList.remove('hidden');
      } else {
        this.counterTop.classList.add('hidden');
        this.counterBottom.classList.add('hidden');
      }
    }
  }
  
  // Tree toggle function - always toggles and selects the category
  function toggleTreeSection(sectionId) {
    const content = document.getElementById(sectionId + '-content');
    const arrow = document.getElementById(sectionId + '-arrow');
    
    if (content && arrow) {
      const isHidden = content.classList.contains('hidden');
      
      if (isHidden) {
        // Expand this section
        content.classList.remove('hidden');
        arrow.style.transform = 'rotate(90deg)';
      } else {
        // Collapse this section
        content.classList.add('hidden');
        arrow.style.transform = 'rotate(0deg)';
      }
      
      // Find the category button in this section and select it
      const categoryBtn = content.closest('.tree-node').querySelector('.category-btn');
      if (categoryBtn) {
        const categoryId = categoryBtn.dataset.categoryId;
        const categoryName = categoryBtn.dataset.categoryName || categoryBtn.textContent.trim();
        const categoryColor = categoryBtn.dataset.categoryColor;
        window.playlistLoader.selectCategory(categoryId, categoryName, categoryColor);
      }
    }
  }

  // Expand the family content programmatically
  function expandFamily(familyId) {
    const content = document.getElementById('family-' + familyId + '-content');
    const arrow = document.getElementById('family-' + familyId + '-arrow');
    if (content && arrow) {
      content.classList.remove('hidden');
      arrow.style.transform = 'rotate(90deg)';
    }
  }

  // Collapse all other families and show only the selected one
  function showOnlyFamilyByChildCategory(selectedId) {
    // Find which family node contains the selected button
    const selectedBtn = document.querySelector(`[data-category-id="${selectedId}"]`);
    if (!selectedBtn) return;
    const familyNode = selectedBtn.closest('[id^="family-"][id$="-node"]');
    const allFamilies = document.querySelectorAll('[id^="family-"][id$="-node"]');
    
    allFamilies.forEach(node => {
      if (familyNode && node !== familyNode) {
        // Hide other families and collapse them
        node.style.display = 'none';
        const content = node.querySelector('.tree-content');
        const arrow = node.querySelector('.tree-arrow');
        if (content && arrow) {
          content.classList.add('hidden');
          arrow.style.transform = 'rotate(0deg)';
        }
      } else {
        // Show the selected family
        node.style.display = 'block';
      }
    });

    // Ensure Show All appears
    const showAllContainer = document.getElementById('show-all-container');
    if (showAllContainer) showAllContainer.style.display = 'block';
  }

  // Collapse all tree sections
  function collapseAllTreeSections() {
    document.querySelectorAll('.tree-content').forEach(content => {
      content.classList.add('hidden');
    });
    document.querySelectorAll('.tree-arrow').forEach(arrow => {
      arrow.style.transform = 'rotate(0deg)';
    });
  }

  // Update URL without page refresh
  function updateUrl(categorySlug) {
    const newUrl = `/categories/${categorySlug}`;
    window.history.pushState({}, '', newUrl);
  }
  
  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    window.playlistLoader = new PlaylistLoader();

    // Hook up Show All to restore visibility of all families and collapse all sections
    const showAllContainer = document.getElementById('show-all-container');
    if (showAllContainer) {
      const btn = showAllContainer.querySelector('button');
      if (btn) {
        btn.addEventListener('click', () => {
          // Show all families
          document.querySelectorAll('[id^="family-"][id$="-node"]').forEach(node => {
            node.style.display = 'block';
          });
          // Collapse all tree sections
          collapseAllTreeSections();
          // Reset URL to home
          window.history.pushState({}, '', '/');
        });
      }
    }
  });

  // --- Color utilities ---
  function isValidHex(hex) {
    return /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(hex);
  }

  function hexToRgb(hex) {
    let h = hex.replace('#', '');
    if (h.length === 3) {
      h = h.split('').map(c => c + c).join('');
    }
    const num = parseInt(h, 16);
    return { r: (num >> 16) & 255, g: (num >> 8) & 255, b: num & 255 };
  }

  function getReadableTextColor(hexBg) {
    const { r, g, b } = hexToRgb(hexBg);
    const toLinear = (v) => {
      v /= 255;
      return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
    };
    const R = toLinear(r), G = toLinear(g), B = toLinear(b);
    const luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;
    return luminance > 0.5 ? '#111111' : '#FFFFFF';
  }
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .category-btn {
    position: relative;
    overflow: hidden;
  }
  
  .category-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
    transition: left 0.5s;
  }
  
  .category-btn:hover::before {
    left: 100%;
  }
  
  /* Family Group Styling */
  .family-group {
    position: relative;
    padding: 2rem;
    border-radius: 20px;
    background: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .reggae-family {
    background: linear-gradient(135deg, rgba(78, 205, 196, 0.1) 0%, rgba(0, 0, 0, 0.3) 100%);
    border-color: rgba(78, 205, 196, 0.3);
  }
  
  .hiphop-family {
    background: linear-gradient(135deg, rgba(255, 107, 107, 0.1) 0%, rgba(0, 0, 0, 0.3) 100%);
    border-color: rgba(255, 107, 107, 0.3);
  }
  
  .cross-connections {
    background: linear-gradient(135deg, rgba(221, 160, 221, 0.1) 0%, rgba(0, 0, 0, 0.3) 100%);
    border-radius: 20px;
    padding: 2rem;
    border: 1px solid rgba(221, 160, 221, 0.3);
  }
  
  /* Family Group Hover Effects */
  .family-group:hover {
    transform: translateY(-5px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    transition: all 0.3s ease;
  }
  
  .parent-category {
    position: relative;
    z-index: 10;
  }
  
  .child-category {
    position: relative;
    z-index: 10;
  }
  
  /* Enhanced hover effects */
  .parent-category:hover {
    transform: scale(1.05);
    box-shadow: 0 0 20px rgba(212, 175, 55, 0.4);
  }
  
  .child-category:hover {
    transform: scale(1.1);
    box-shadow: 0 0 15px rgba(212, 175, 55, 0.3);
  }
  
  /* Family connection indicators */
  .family-group h4::after {
    content: 'üå≥';
    margin-left: 10px;
    opacity: 0.7;
  }
  
  .cross-connections h4::after {
    content: 'üîó';
    margin-left: 10px;
    opacity: 0.7;
  }
</style>