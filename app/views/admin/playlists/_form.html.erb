<%= form_with model: [:admin, @playlist], class: "space-y-4" do |f| %>
  <div>
    <%= f.label :title, class: 'block text-gray-300 mb-1' %>
    <%= f.text_field :title, class: 'w-full p-2 bg-gray-800 text-white rounded' %>
    <p class="text-gray-400 text-xs mt-1">Auto-filled from Spotify, but you can edit.</p>
  </div>
  <div>
    <%= f.label :description, class: 'block text-gray-300 mb-1' %>
    <%= f.text_area :description, rows: 4, class: 'w-full p-2 bg-gray-800 text-white rounded' %>
    <p class="text-gray-400 text-xs mt-1">Short summary for the landing page card.</p>
  </div>
  <div>
    <%= f.label :cover_image_url, class: 'block text-gray-300 mb-1' %>
    <%= f.text_field :cover_image_url, class: 'w-full p-2 bg-gray-800 text-white rounded' %>
    <p class="text-gray-400 text-xs mt-1">Auto-filled thumbnail; replace with a custom image if you prefer.</p>
  </div>
  <div>
    <%= f.label :spotify_url, 'Spotify Playlist URL', class: 'block text-gray-300 mb-1' %>
    <div class="flex gap-2">
      <%= f.text_field :spotify_url, id: 'playlist_spotify_url', placeholder: 'https://open.spotify.com/playlist/...', class: 'flex-1 p-2 bg-gray-800 text-white rounded' %>
      <button type="button" onclick="return autofillFromSpotify()" class="px-3 py-2 bg-green-500 text-black rounded">Import from Spotify</button>
    </div>
    <p class="text-gray-400 text-xs mt-1">Weâ€™ll fetch title, image, track count, and duration. You can still edit everything.</p>
  </div>
  <div class="grid grid-cols-2 gap-4">
    <div>
      <%= f.label :track_count, class: 'block text-gray-300 mb-1' %>
      <%= f.number_field :track_count, class: 'w-full p-2 bg-gray-800 text-white rounded' %>
      <p class="text-gray-400 text-xs mt-1">Auto-filled. Keep it accurate so stats display correctly.</p>
    </div>
    <div>
      <%= f.label :duration, class: 'block text-gray-300 mb-1' %>
      <%= f.text_field :duration, placeholder: 'e.g., 1h 45m', class: 'w-full p-2 bg-gray-800 text-white rounded' %>
      <p class="text-gray-400 text-xs mt-1">Optional. If blank, we show the track count.</p>
    </div>
  </div>
  <div class="grid grid-cols-2 gap-4 items-start">
    <div>
      <%= f.label :category_ids, 'Categories', class: 'block text-gray-300 mb-1' %>
      <p class="text-gray-400 text-xs mb-2">Select one or more. You can assign to multiple branches and subcategories.</p>
      <%= f.collection_check_boxes :category_ids, Category.ordered, :id, :name do |b| %>
        <div class="flex items-center gap-2 mb-1">
          <%= b.check_box(class: 'rounded') %>
          <%= b.label(class: 'text-gray-300') %>
        </div>
      <% end %>
    </div>
    <div class="flex items-center gap-2 mt-6">
      <%= f.check_box :featured %>
      <%= f.label :featured, 'Featured', class: 'text-gray-300' %>
    </div>
  </div>
  <div>
    <%= f.label :position, class: 'block text-gray-300 mb-1' %>
    <%= f.number_field :position, class: 'w-full p-2 bg-gray-800 text-white rounded' %>
    <p class="text-gray-400 text-xs mt-1">Ordering hint for how playlists appear within a category.</p>
  </div>
  <div>
    <%= f.submit class: 'px-4 py-2 bg-yellow-500 text-black rounded-lg' %>
  </div>
<% end %>

<script>
  async function autofillFromSpotify(){
    const urlInput = document.getElementById('playlist_spotify_url');
    if(!urlInput.value){ return false; }
    try{
      const res = await fetch('<%= import_spotify_admin_playlists_path %>', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content },
        body: JSON.stringify({ spotify_url: urlInput.value })
      });
      const data = await res.json();
      if(res.ok){
        if(data.title){ document.getElementById('playlist_title').value = data.title; }
        if(data.thumbnail_url){ document.getElementById('playlist_cover_image_url').value = data.thumbnail_url; }
        if(data.track_count){ document.getElementById('playlist_track_count').value = data.track_count; }
        if(data.duration){ document.getElementById('playlist_duration').value = data.duration; }
        if(data.spotify_url){ urlInput.value = data.spotify_url; }
      }else{
        alert(data.error || 'Failed to import from Spotify');
      }
    }catch(e){
      alert('Error importing from Spotify');
    }
    return false;
  }
</script>


